
# library
library(dplyr)
library(ggplot2)
library(ggpubr)
library(ggthemes) 

load("1_Plasmids_combined_df_1000.RData")

#
unique(Plasmids_combined_df_1000$Plasmid_type)

# 1.1 Conj
Plasmids_combined_df_1000$Plasmid_type <- factor(Plasmids_combined_df_1000$Plasmid_type, 
                                                 levels = c( "Conj", "mob_unconj", "unmob"))

#
median_data <- aggregate(length ~ Plasmid_type, data = Plasmids_combined_df_1000, FUN = median)  
median_data <- median_data[order(median_data$length), ] 

# 
median_data$log10_length <- log10(median_data$length)  

p_Plasmid_ditribution <- ggplot(Plasmids_combined_df_1000) + 
  geom_density(aes(x=log(length, base = 10),group= Plasmid_type ,fill= Plasmid_type), alpha = 0.85)+
  # geom_segment(aes(x=rep.daaa..each...76. , y = 0, xend = rep.daaa..each...76., 
  #                  yend = 0.05,group= variable),size = 0.35)+
  
  geom_vline(data = median_data, aes(xintercept = log10_length), color = "black", linetype = "dashed") +  
  scale_fill_manual(values = c("#ce3d36","#e9a91f", "#497549")) +
  theme_par(base_size = 14) +
  theme(legend.position = 'none') + 
  facet_wrap(.~Plasmid_type, scales='free',nrow = 1) +
  xlab("Plasmid size (bp; log10)") +ylab("Density") +
  xlim(2.75, 5.85)
#facet_wrap(.~variable,scales='free',nrow = 2)

p_Plasmid_ditribution

# 
Plasmids_combined_df_1000$log_length <- log(Plasmids_combined_df_1000$length, base = 10)
Plasmids_combined_df_1000 %>% group_by(Plasmid_type) %>% summarise(Median = median(log_length), Max= max(log_length), Min = min(log_length))
Plasmids_combined_df_1000 %>% group_by(Plasmid_type) %>% summarise(avg = mean(length))

# 
#load("1_ARG_MGE_co_existence_corrected_simplify_byARG_df_3kb_annotation.RData") # 81371
load("3_ARG_MGE_corrected_yes_byARG_3kb_coverage0.1_mmseqs_annotation_df.RData") # 77628

# 
Plasmids_simplify_df <- ARG_MGE_corrected_yes_byARG_3kb_mmseqs_df %>% 
  filter(MGE_type_final == "Plasmids") %>% 
  select(Contig, ARG, Plasmid_type, length) 

Plasmids_numARG_df <- Plasmids_simplify_df %>% group_by(Contig) %>% 
  dplyr::summarise(Plasmid_type = unique(Plasmid_type), numARG = n()) 


# plot
Plasmids_numARG_df$Plasmid_type <- factor(Plasmids_numARG_df$Plasmid_type, levels = c( "Conj", "mob_unconj", "unmob"))

p_Plasmid_ARGnumber <- Plasmids_numARG_df %>% 
  ggplot(aes(x=Plasmid_type, y=numARG))+
  stat_summary(fun.data = mean_se,geom="errorbar",width=0.2, alpha=0.85)+
  stat_summary(mapping=aes(fill =Plasmid_type),fun=mean,geom = "bar",fun.args = list(mult=1)) +
  scale_fill_manual(values = c("#ce3d36","#e9a91f", "#497549")) +
  #geom_jitter(width = 0.25, color="#9e9e9e", size = 3.2, shape = 19, alpha = 0.6) + 
  #theme_pubr(border = T, legend = "none", base_size = 15)+ 
  theme_par(base_size = 14) +
  
  #ylim(c(0,25))+ 
  ylab("No. of ARGs per plasmid") + xlab("") + 
  theme(panel.background = element_rect(fill = "white")) + 
  #stat_compare_means() + 
  theme(axis.text.x = element_text(vjust = 0.75,angle = 0)) +
  scale_x_discrete(labels=c("Conjugative","Mobilizable", "Nonmobilizable")) +
  theme(legend.position = 'none') 

p_Plasmid_ARGnumber

compare_means(numARG ~ Plasmid_type,  data = Plasmids_numARG_df, method = "wilcox.test")

# 数据计算
unique(Plasmids_numARG_df$Plasmid_type) # Conj mob_unconj unmob
Plasmids_numARG_df %>% group_by(Plasmid_type) %>% summarise(Avg = mean(numARG))

# 以高 4 宽 5 导出  1_plasmid_numARG

####### combined 
library(patchwork)
layout <- "
AAAB
"

p_Plasmid_ditribution + p_Plasmid_ARGnumber + plot_layout(design = layout)

# 以高 6.5 宽 21 导出  1.1_plasmid_length_percentage_ditribution_numARG_numARG_kb

#################################

load("1_Circular_plasmid_information.Rdata")

# 评估circular plasmids的不同plasmids的数量变化 -------

#
Circular_plasmid_information$plasmid_type <- factor(Circular_plasmid_information$plasmid_type, 
                                                levels = c( "Conj", "mob_unconj", "unmob"))

# 
median_data <- aggregate(Length ~ plasmid_type, data = Circular_plasmid_information, FUN = median)  
median_data <- median_data[order(median_data$Length), ] #

#
median_data$log10_length <- log10(median_data$Length)  

p_circular_Plasmid_ditribution <- ggplot(Circular_plasmid_information) + 
  geom_density(aes(x=log(Length, base = 10),group= plasmid_type ,fill= plasmid_type), alpha = 0.85)+
  # geom_segment(aes(x=rep.daaa..each...76. , y = 0, xend = rep.daaa..each...76., 
  #                  yend = 0.05,group= variable),size = 0.35)+
  geom_vline(data = median_data, aes(xintercept = log10_length), color = "black", linetype = "dashed") + 
  scale_fill_manual(values = c("#ce3d36","#e9a91f", "#497549")) +
  theme_par(base_size = 14) +
  theme(legend.position = 'none') +
  facet_wrap(.~plasmid_type, scales='free',nrow = 1) +
  xlab("Plasmid size (bp; log10)") +ylab("Density") +
  xlim(2.8, 5.5)
#facet_wrap(.~variable,scales='free',nrow = 2)

p_circular_Plasmid_ditribution

# 
Circular_plasmid_information$log_length <- log(Circular_plasmid_information$Length, base = 10)
Circular_plasmid_information %>% group_by(plasmid_type) %>% summarise(Median = median(log_length), Max= max(log_length), Min = min(log_length))
Circular_plasmid_information %>% group_by(plasmid_type) %>% summarise(avg = mean(Length))

# 
#load("1_ARG_MGE_co_existence_corrected_simplify_byARG_df_3kb_annotation.RData") 
load("3_ARG_MGE_corrected_yes_byARG_3kb_coverage0.1_mmseqs_annotation_df.RData") 

# KB
ARG_MGE_corrected_yes_byARG_3kb_mmseqs_df <- ARG_MGE_corrected_yes_byARG_3kb_mmseqs_df %>% 
  mutate(length_kb=length/1000)

Plasmids_circular_simplify_df <- ARG_MGE_corrected_yes_byARG_3kb_mmseqs_df %>% 
  filter(MGE_type_final == "Plasmids") %>% 
  filter(Contig %in% Circular_plasmid_information$Contig) %>%
  select(Contig, ARG, Plasmid_type, length, length_kb)

unique(Plasmids_circular_simplify_df$Contig) # 35 --- 55

unique(Plasmids_circular_simplify_df$Plasmid_type) #"mob_unconj" "unmob" 

# plot
Plasmids_circular_numARG_KB_df <- Plasmids_circular_simplify_df %>% group_by(Contig) %>% 
  dplyr::summarise(Plasmid_type = unique(Plasmid_type), length_kb = unique(length_kb), numARG = n()) 

Plasmids_circular_numARG_KB_df <- Plasmids_circular_numARG_KB_df %>% mutate(numARG_kb = numARG/length_kb)

# plot
Plasmids_circular_numARG_KB_df$Plasmid_type <- factor(Plasmids_circular_numARG_KB_df$Plasmid_type, levels = c( "mob_unconj", "unmob"))

p_Plasmid_circular_ARGnumber_kb <- ggplot(Plasmids_circular_numARG_KB_df) +
  aes(x = Plasmid_type, y = numARG_kb, fill = Plasmid_type) +
  geom_boxplot(alpha = 0.75, outlier.shape = NA, size = 0.5, color = "black") +
  scale_fill_manual(values = c("#e9a91f", "#497549")) +
  #theme_test(base_size = 15) +
  theme_par(base_size = 14) +
  ylim(0, 0.5) +
  theme(axis.ticks = element_line(colour = "black"), axis.text = element_text(colour = "black")) + 
  xlab("") +ylab("Number of ARGs per plasmid/kb") +
  scale_x_discrete(labels=c("Mobilizable", "Nonmobilizable")) +
  theme(legend.position = 'none') 

p_Plasmid_circular_ARGnumber_kb

compare_means(numARG_kb ~ Plasmid_type,  data = Plasmids_circular_numARG_KB_df, method = "wilcox.test")

unique(Plasmids_circular_numARG_KB_df$Plasmid_type) # Conj mob_unconj unmob
Plasmids_circular_numARG_KB_df %>% group_by(Plasmid_type) %>% summarise(Avg = mean(numARG_kb))
Plasmids_circular_numARG_KB_df %>% group_by(Plasmid_type) %>% summarise(Median = median(numARG_kb))

# 
Plasmids_circular_numARG_KB_df$Plasmid_type <- factor(Plasmids_circular_numARG_KB_df$Plasmid_type, levels = c( "mob_unconj", "unmob"))

p_Plasmid_circular_ARGnumber <- Plasmids_circular_numARG_KB_df %>% 
  ggplot(aes(x=Plasmid_type, y=numARG))+
  stat_summary(fun.data = mean_se,geom="errorbar",width=0.2, alpha=0.85)+
  stat_summary(mapping=aes(fill =Plasmid_type),fun=mean,geom = "bar",fun.args = list(mult=1)) +
  scale_fill_manual(values = c("#e9a91f", "#497549")) +
  #geom_jitter(width = 0.25, color="#9e9e9e", size = 3.2, shape = 19, alpha = 0.6) + 
  #theme_pubr(border = T, legend = "none", base_size = 15)+ 
  theme_par(base_size = 14) +
  
  #ylim(c(0,25))+ 
  ylab("Number of ARGs per plasmid") + xlab("") + 
  theme(panel.background = element_rect(fill = "white")) + 
  #stat_compare_means() + 
  theme(axis.text.x = element_text(vjust = 0.75,angle = 0)) +
  scale_x_discrete(labels=c("Mobilizable", "Nonmobilizable")) +
  theme(legend.position = 'none') 

p_Plasmid_circular_ARGnumber

compare_means(numARG ~ Plasmid_type,  data = Plasmids_circular_numARG_KB_df, method = "wilcox.test")

# 
unique(Plasmids_circular_numARG_KB_df$Plasmid_type) # Conj mob_unconj unmob
Plasmids_circular_numARG_KB_df %>% group_by(Plasmid_type) %>% summarise(Avg = mean(numARG))

####### combined 
library(patchwork)
layout <- "
AAAB
"

p_circular_Plasmid_ditribution + p_Plasmid_circular_ARGnumber + plot_layout(design = layout)

# 以高 6.5 宽 21 导出  1.1_plasmid_circular_length_percentage_ditribution_numARG_numARG_kb


#################


library(patchwork)
layout <- "
ABCD
EFGH
"

p_Plasmid_ditribution + p_Plasmid + p_Plasmid_ARGnumber + p_Plasmid_ARGnumber_kb + 
  p_circular_Plasmid_ditribution + p_circular_Plasmid + p_Plasmid_circular_ARGnumber + p_Plasmid_circular_ARGnumber_kb +
  plot_layout(design = layout)





